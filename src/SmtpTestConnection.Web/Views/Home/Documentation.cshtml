@using SmtpTestConnection.Web.Startup
@model ConnectionModel
@{
    ViewBag.ActiveMenu = PageNames.Documentation;
}

@section scripts
    {
    <environment names="Development">
        <script src="~/js/views/home/index.js"></script>
    </environment>

    <environment names="Staging,Production">
        <script src="~/js/views/home/index.min.js"></script>
    </environment>
}

    <div>

        <div class="sidepanel">

            <a class="title" href="#">Introduction</a>

            <a class="section" href="#">About this Package</a>

            <div class="divider left"></div>

            <a class="title" href="#">Installation</a>
            <a class="section" href="#installingapp">Add Nuget</a>

            <div class="divider left"></div>

            <a class="title" href="#basicfeatures">Basic Features</a>
            <a class="section" href="#authentication">Authentication</a>
            <a class="section" href="#ssm">Send single mail</a>
            <a class="section" href="#mmsr">Multiple Mails</a>
            <a class="section" href="#bcandccs">BCs and CCs</a>

            <div class="divider left"></div>

            <a class="title" href="#advft">Advanced Features</a>

            <div class="divider left"></div>

            <a class="title" href="#accesibility">Accesibility</a>

            <div class="divider left"></div>

            <a class="title" href="#moreinfo">More Info</a>

            <div class="space double"></div>

        </div>

        <div class="right-col">

            <h1>Introduction</h1>

            <p>
                <b>Afe.PRD.Email.Sender</b> is a .NET library that enables developers to connect and send emails without having to set it up from scratch within their own code. This package is compactible with <code>net7.0</code> <code>net6.0</code> <code>netcoreapp3.1</code> <code>xamarin</code> <a href="https://www.nuget.org/packages/Afe.PRD.Email.Sender#supportedframeworks-body-tab" target="_blank">see more</a> <br />
                Package Purposes:
                <ul>
                    <li>Email sending integration without set up issues</li>
                    <li>Send free unlimited emails</li>
                    <li>Ensure email delivery upto 99%</li>
                    <li>Easy template management</li>
                    <li>Take off attachment hassles</li>
                </ul>
            </p>


            <h2>Supported Versions:</h2>

            <p><b>Current Version @L("App_version")</b> Earlier versions @L("Other_versions") </p>

            <div class="divider" style="width:24%; margin:30px 0;"></div>


            <h2 id="installingapp"></h2>
            <h2>Installation</h2>

            <p>
                <b>Install the library:</b>
                To use this package you need to install it as a Nuget package in your .Net application
                <img style="height:350px" src="~/images/installationshot.png" alt="nugetInstall" />
            </p>

            <p>
                <b>Test your connection:</b>
                In the images below, you can supply all the entries if you have them handy. However it is only email and password that is required. If the connection test comes back unsuccessful you can edit your entries and try again.
            </p>
            <p><img style="height: 500px; border: 1px solid" src="~/images/connectionpage.png" /></p>

            <p><img style="height: 500px; border: 1px solid" src="~/images/succConnection.png" /></p>
            <p><img style="height: 500px; border: 1px solid" src="~/images/notSuccConn.png" /></p>


            <div class="divider" style="width:24%; margin:30px 0;"></div>

            <h1 id="#basicfeatures"> </h1>

            <h1>Basic Features</h1>

            <p id="authentication">
                <b>Authenticate your email credentials dynamically:</b>
                Before sending your emails, you need to retrieve your email sender settings and then proceed to send your emails. <br />
                <code>var res = await SendMail.AuthenticateSenderDomain("example@domain.com", "your_password_here");</code> <br /> <br />
                Image below shows successful authentication.
            </p>
            <p><img src="~/images/authres.png" /></p>

            <p id="ssm">
                <b>Send single email:</b>
                After you have retrieved your email sender settings you can then proceed to send your emails. <br />
            </p>
            <pre class="prettyprint lang-cs">
                <code>
                    var res = await SendMail.AuthenticateSenderDomain("sender@domain.domain", "your_password_here");
                    var msgModel = new MessageModel
                    {
                        EmailAddresses = new string[] { "username@domain.com"},
                        Message = "test email integration by Product Drive. This string can also be html string",
                        EmailDisplayName = "Your Choice Display",
                        Subject = "Testing Email"
                    };
                    var isSent = SendMail.SendSingleEmail(msgModel, res.Settings);
                </code>
            </pre>

            <p>
                <b>Single message to many recievers:</b>
                After you have retrieved your email sender settings you can then proceed to send your emails. <br />
            </p>
            <pre class="prettyprint lang-cs">
                <code class="language-c#">
                    var res = await SendMail.AuthenticateSenderDomain("sender@domain.domain", "your_password_here");
                    //The recievers can see all other recievers in the email header. Use blind copies to prevent this.
                    var msgModel = new MessageModel
                    {
                        EmailAddresses = new string[] { "user1@domain.com", "user2@domain.com", "user3@domain.com"},
                        Message = "test email integration by Product Drive. This string can also be html string",
                        EmailDisplayName = "Your Choice Display",
                        Subject = "Testing Email"
                    };
                    var isSent = SendMail.SendSingleEmail(msgModel, res.Settings);
                </code>
            </pre>

            <p id="mmsr"></p>

            <p>
                <b>Send many messages to single receiver:</b>
                This feature allows you to fire many emails(e.g Welcome emails with other instruction emails) to a single reciever with a single method call. <br />
            </p>
            <pre class="prettyprint lang-cs">
                <code>
                    //Note that two different messages but the same reciever (newuser@domain.com)
                    var message1 = new MessageModel
                    {
                        EmailAddresses = new string[] { "newuser@domain.com" },
                        EmailDisplayName = "YourDisplayName",
                        Subject = "Welcome",
                        Message = "This is welcome message for you"
                    };

                    var message2 = new MessageModel
                    {
                        EmailAddresses = new string[] { "newuser@domain.com" },
                        EmailDisplayName = "YourDisplayName",
                        Subject = "What Next after registration",
                        Message = "Here are the next few steps"
                    };
                    var allMessages = new List&lt;MessageModel&gt;();
                    //The messages should be in a list
                    allMessages.Add(message1);
                    allMessages.Add(message2);

                    //Authenticate to get your domain settings
                    var res = await SendMail.AuthenticateSenderDomain("sender@domain.domain", "your_password");

                    //send email
                    var isSent = SendMail.SendMultipleEmail(allMessages, res.Settings);
                </code>
            </pre>

            <p>
                <b>Send many messages to many receivers:</b>
                This feature allows you to fire many emails(e.g Birthday messages probably with similar content) to unique recievers with a single method call. <br />
            </p>
            <pre class="prettyprint lang-cs">
                <code>
                    //Note that two different messages also two different recievers
                    var message1 = new MessageModel
                    {
                        EmailAddresses = new string[] { "newuser1@domain.com" },
                        EmailDisplayName = "YourDisplayName",
                        Subject = "Birthday wishes",
                        Message = "Happy birthday to you {name of user 1}"
                    };

                    var message2 = new MessageModel
                    {
                        EmailAddresses = new string[] { "newuser@domain.com" },
                        EmailDisplayName = "YourDisplayName",
                        Subject = "Birthday wishes",
                        Message = "Happy birthday to you {name of user 2}"
                    };
                    var allMessages = new List&lt;MessageModel&gt;();
                    //The messages should be in a list
                    allMessages.Add(message1);
                    allMessages.Add(message2);

                    //Authenticate to get your domain settings
                    var res = await SendMail.AuthenticateSenderDomain("sender@domain.domain", "your_password");

                    //send email
                    var isSent = SendMail.SendMultipleEmail(allMessages, res.Settings);
                </code>
            </pre>

            <p id="bcandccs"></p>
            <p>
                <b>Email Copies and Blind Copies:</b>
                You can simply copy or blind copy a particular email message. You will add the emaill address to be copied to cc and the email address for blind copy will into the bcc properties respectively<br />
            </p>
            <pre class="prettyprint lang-cs">
                <code>
                    var res = await SendMail.AuthenticateSenderDomain("sender@domain.domain", "your_password_here");
                    //The reciever can see Ccs in the email header but can not see the Bccs in the header.
                    var msgModel = new MessageModel
                    {
                        EmailAddresses = new string[] { "user1@domain.com"},
                        Cc = new string[] { "adminUser@domain.com"},
                        Bcc = new string[] {"user2@domain.com" },
                        Message = "test email integration by Product Drive. This string can also be html string",
                        EmailDisplayName = "Your Choice Display",
                        Subject = "Testing Email"
                    };
                    var isSent = SendMail.SendSingleEmail(msgModel, res.Settings);
                </code>
            </pre>

            <div class="divider" style="width:24%; margin:30px 0;"></div>
            <p id="advft"></p>

            <h1>Advanced Features</h1>

            <h2>Using Templates</h2>

            <p>
                Details coming soon
            </p>
            
            <div class="doublespace"></div>
            <div class="divider" style="width:24%; margin:30px 0;"></div>


        </div>

    </div>



<div class="row">
    <div class="col-lg-12">
        @L(DateTime.Now.ToString("D"))
    </div>
</div>